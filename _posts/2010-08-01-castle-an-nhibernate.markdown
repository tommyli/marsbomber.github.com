--- 
layout: post
title: Castle AR and NHibernate
wordpress_id: 296
wordpress_url: http://blog.elinkmedia.net.au/?p=296
date: 2010-08-01 22:23:08 +10:00
---
It's been a while since my last post. So a bit update first.

Lots of things actually happened or happening in July. I started a new job from the start of the July, hence very busy! I also needed to help out my former employer for the hiring of the new developer. The interview process was quite tiring, but very different and very challenging. I actually enjoyed it and I believe I learnt a lot from it.

As for the technical development side, with my new job, I'm doing a new project in Zend Framework of course. I'm getting my grasp of it and hopefully I can make some valuable contributions along the way. I'm also finishing off a C#.Net project for my former employer as well. This blog post will be about the 2 .Net libraries that I used for this project.

For this .Net project, I started with using the NHibernate ORM library. I found my hate of XML configuration pretty soon after I kick started the project. Consider the complexity of this application is quite low, I jumped on the Castle ActiveRecord library, which uses NHibernate as the underlying ORM.

Don't want to offend anyone, but the documentation of both libraries are quite average. So here are some STUFF I had to trial and error to find out myself.

1st, for a ASP.Net project, here's part of the Web.config to get Castle going and also logging the raw SQLs that are generated by NHibernate.

[xml]
&lt;configSections&gt;
    &lt;!-- your normal stuff ... --&gt;
    &lt;section name=&quot;activerecord&quot; type=&quot;Castle.ActiveRecord.Framework.Config.ActiveRecordSectionHandler, Castle.ActiveRecord&quot; /&gt;
    &lt;section name=&quot;log4net&quot; type=&quot;log4net.Config.Log4NetConfigurationSectionHandler, log4net&quot; /&gt;
&lt;/configSections&gt;

&lt;activerecord isWeb=&quot;true&quot; isDebug=&quot;true&quot; &gt;
    &lt;config&gt;
        &lt;add key=&quot;connection.provider&quot; value=&quot;NHibernate.Connection.DriverConnectionProvider&quot; /&gt;
        &lt;add key=&quot;dialect&quot; value=&quot;NHibernate.Dialect.MsSql2000Dialect&quot; /&gt;
        &lt;add key=&quot;connection.driver_class&quot; value=&quot;NHibernate.Driver.SqlClientDriver&quot; /&gt;
        &lt;add key=&quot;connection.connection_string&quot; value=&quot;Data Source=JIMLIWIN7\SQLEXPRESS;Initial Catalog=DBNAME;Persist Security Info=True;User ID=USER;Password=PASSWORD&quot; /&gt;
        &lt;add key=&quot;proxyfactory.factory_class&quot; value=&quot;NHibernate.ByteCode.Castle.ProxyFactoryFactory, NHibernate.ByteCode.Castle&quot; /&gt;
        &lt;add key=&quot;show_sql&quot; value=&quot;true&quot; /&gt;
    &lt;/config&gt;
&lt;/activerecord&gt;

&lt;log4net&gt;
    &lt;appender name=&quot;NHibernateRollingFileAppender&quot; type=&quot;log4net.Appender.RollingFileAppender&quot;&gt;
        &lt;file value=&quot;LogNHibernate.txt&quot;/&gt;
        &lt;appendToFile value=&quot;true&quot;/&gt;
        &lt;rollingStyle value=&quot;Size&quot;/&gt;
        &lt;datePattern value=&quot;yyyyMMdd&quot;/&gt;
        &lt;maxSizeRollBackups value=&quot;10&quot;/&gt;
        &lt;maximumFileSize value=&quot;10MB&quot;/&gt;
        &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt;
            &lt;conversionPattern value=&quot;%date - %message%newline&quot;/&gt;
        &lt;/layout&gt;
    &lt;/appender&gt;

    &lt;logger name=&quot;NHibernate.SQL&quot; additivity=&quot;false&quot;&gt;
        &lt;level value=&quot;DEBUG&quot;/&gt;
        &lt;!-- ALL, DEBUG, INFO, WARN, ERROR, FATAL or OFF --&gt;
        &lt;appender-ref ref=&quot;NHibernateRollingFileAppender&quot;/&gt;
    &lt;/logger&gt;
&lt;/log4net&gt;
[/xml]

2nd, in my entity classes, I have properties that are linked to nullable fields. To get this whole AR thing happy, I do the following. The trick is the "?".

[csharp]
private System.DateTime? _dateDeleted;

[Property(&quot;DateDeleted&quot;, ColumnType = &quot;Timestamp&quot;)]
public virtual System.DateTime? DateDeleted
{
    get
    {
        return this._dateDeleted;
    }
    set
    {
        this._dateDeleted = value;
    }
}
[/csharp]

There are other things that have killed me hours. But I think those are just because of my own stupidity and incompetency in .NET ... So I'll keep those to myself. Bye for now.
